// SPDX-License-Identifier: MIT
import "../interfaces/IERC721CollectibleMintable.sol";
import "../interfaces/IERC721Collectible.sol";
import "../interfaces/IERC721Valuable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol";
import "@openzeppelin/contracts/access/AccessControlEnumerable.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

/**
 * @dev {ERC721} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *  - token types with names, symbols, and values
 *  - "collection" views detailing which types are owned by an account and their quantities
 *  - "value" views showing the total value of all tokens, those owned by an account, etc.
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */
pragma solidity ^0.8.0;
contract ERC721ValuableCollectibleToken is Context, AccessControlEnumerable, ERC721Enumerable, ERC721Burnable, ERC721Pausable, IERC721CollectibleMintable, IERC721Valuable {
    using Counters for Counters.Counter;

    bytes32 public constant MANAGER_ROLE = keccak256("MANAGER_ROLE");
    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");

    Counters.Counter private _tokenIdTracker;

    string private _baseTokenURI;

    // Collectible types and collection enumeration
    struct TypeInfo {
        string name;
        string symbol;
        uint256 value;
    }

    // token types
    TypeInfo[] public typeInfo;
    mapping(uint256 => uint256) private _tokenType;

    // Global totals
    uint256 private _totalValue;

    // Owner totals: types and value
    mapping(address => uint256) private _ownedTypes;
    mapping(address => uint256) private _ownedValue;

    // Mapping from owner and type to list of owned token IDs
    mapping(address => mapping(uint256 => uint256[])) private _ownedTypeTokens;

    //  Mapping from owner, type, token ID to index of the owned-and-typed tokens list
    mapping(address => mapping(uint256 => mapping(uint256 => uint256))) private _ownedTypeTokensIndex;

    // Array of types, each with all token ids, used for enumeration
    mapping(uint256 => uint256[]) private _allTypeTokens;

    // Mapping from type and token id to position in the _allTypeTokens array
    mapping(uint256 => mapping(uint256 => uint256)) private _allTypeTokensIndex;

    event AddTokenType(uint256 indexed tokenType, string name, string symbol, uint256 value);

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(string memory name, string memory symbol, string memory baseTokenURI) ERC721(name, symbol) {
        _baseTokenURI = baseTokenURI;

        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());

        _setupRole(MANAGER_ROLE, _msgSender());
        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlEnumerable, ERC721, ERC721Enumerable, IERC165) returns (bool) {
        return interfaceId == type(IERC721CollectibleMintable).interfaceId
            || interfaceId == type(IERC721Collectible).interfaceId
            || interfaceId == type(IERC721Valuable).interfaceId
            || super.supportsInterface(interfaceId);
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    function totalTypes() public view virtual override returns (uint256 count) {
        return typeInfo.length;
    }

    function typeName(uint256 _type) external view virtual override returns (string memory) {
        require(_type < totalTypes(), "ERC721ValuableCollectibleToken: type out of bounds");
        return typeInfo[_type].name;
    }

    function typeSymbol(uint256 _type) external view virtual override returns (string memory) {
        require(_type < totalTypes(), "ERC721ValuableCollectibleToken: type out of bounds");
        return typeInfo[_type].symbol;
    }

    function typeValue(uint256 _type) external view returns (uint256) {
        require(_type < totalTypes(), "ERC721ValuableCollectibleToken: type out of bounds");
        return typeInfo[_type].value;
    }

    function tokenType(uint256 _tokenId) external view override returns (uint256) {
        require(_exists(_tokenId), "ERC721ValuableCollectibleToken: value query for nonexistent token");
        return _tokenTypeHypothetical(_tokenId);
    }

    function _tokenTypeHypothetical(uint256 _tokenId) internal view virtual returns (uint256) {
        return _tokenType[_tokenId];
    }

    function tokenValue(uint256 _tokenId) external view override returns (uint256) {
        require(_exists(_tokenId), "ERC721ValuableCollectibleToken: value query for nonexistent token");
        return _tokenValueHypothetical(_tokenId);
    }

    function _tokenValueHypothetical(uint256 _tokenId) internal view virtual returns (uint256) {
        return typeInfo[_tokenType[_tokenId]].value;
    }

    function totalSupplyByType(uint256 _type) public view virtual override returns (uint256) {
        require(_type < totalTypes(), "ERC721ValuableCollectibleToken: type out of bounds");
        return _allTypeTokens[_type].length;
    }

    function totalValue() external view virtual override returns (uint256) {
        return _totalValue;
    }

    function ownerTypes(address _owner) external view virtual override returns (uint256) {
        return _ownedTypes[_owner];
    }

    function ownerValue(address _owner) external view virtual override returns (uint256) {
        return _ownedValue[_owner];
    }

    function balanceOfOwnerByType(address _owner, uint256 _type) public view virtual override returns (uint256) {
        require(_type < totalTypes(), "ERC721ValuableCollectibleToken: type out of bounds");
        return _ownedTypeTokens[_owner][_type].length;
    }

    function tokenOfOwnerByTypeAndIndex(address _owner, uint256 _type, uint256 _index) external view virtual override returns (uint256) {
        require(_type < totalTypes(), "ERC721ValuableCollectibleToken: type out of bounds");
        require(_index < balanceOfOwnerByType(_owner, _type), "ERC721ValuableCollectibleToken: index out of bounds");
        return _ownedTypeTokens[_owner][_type][_index];
    }

    function tokenByTypeAndIndex(uint256 _type, uint256 _index) external view virtual override returns (uint256) {
        require(_type < totalTypes(), "ERC721ValuableCollectibleToken: type out of bounds");
        require(_index < totalSupplyByType(_type), "ERC721ValuableCollectibleToken: index out of bounds");
        return _allTypeTokens[_type][_index];
    }

    function addTokenType(string memory _name, string memory _symbol, uint256 _value) public virtual {
        require(hasRole(MANAGER_ROLE, _msgSender()), "ERC721ValuableCollectibleToken: must have manager role to add token type");
        uint256 tType = typeInfo.length;
        typeInfo.push(TypeInfo({
            name: _name,
            symbol: _symbol,
            value: _value
        }));
        emit AddTokenType(tType, _name, _symbol, _value);
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address _to, uint256 _type) public virtual override {
        require(hasRole(MINTER_ROLE, _msgSender()), "ERC721ValuableCollectibleToken: must have minter role to mint");
        require(_type < totalTypes(), "ERC721ValuableCollectibleToken: type out of bounds");

        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        uint256 tokenId = _tokenIdTracker.current();
        _tokenIdTracker.increment();

        // minting function requires knowledge  of the token type; write it first.
        // this is sufficient to support _tokenTypeHypothetical and
        //  _tokenValueHypothetical.
        _tokenType[tokenId] = _type;
        _mint(_to, tokenId);
    }

    /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function pause() public virtual {
        require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721ValuableCollectibleToken: must have pauser role to pause");
        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function unpause() public virtual {
        require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721ValuableCollectibleToken: must have pauser role to unpause");
        _unpause();
    }

    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {
        super._beforeTokenTransfer(from, to, tokenId);

        uint256 tType = _tokenTypeHypothetical(tokenId);
        uint256 tValue = _tokenValueHypothetical(tokenId);

        if (from == address(0)) {
            _addTokenToAllTypeTokens(tokenId, tType, tValue);
        } else if (from != to) {
            _removeTokenFromOwnerTypeTokens(from, tokenId, tType, tValue);
        }

        if  (to == address(0)) {
            _removeTokenFromAllTypeTokens(tokenId, tType, tValue);
        } else if (to != from) {
            _addTokenToOwnerTypeTokens(to, tokenId, tType, tValue);
        }
    }

    function _addTokenToAllTypeTokens(uint256 _tokenId, uint256 _type, uint256 _value) private {
        _allTypeTokensIndex[_type][_tokenId] = _allTypeTokens[_type].length;
        _allTypeTokens[_type].push(_tokenId);
        _totalValue =  _totalValue + _value;
    }

    function _removeTokenFromAllTypeTokens(uint256 _tokenId, uint256 _type, uint256 _value) private {
        // To prevent a gap in the tokens array, store the last token in the
        // vacated index (swap and pop).
        uint256 lastTokenIndex = _allTypeTokens[_type].length - 1;
        uint256 tokenIndex = _allTypeTokensIndex[_type][_tokenId];

        uint256 lastTokenId = _allTypeTokens[_type][lastTokenIndex];

        // move the last token into place and update its index
        _allTypeTokens[_type][tokenIndex] = lastTokenId;
        _allTypeTokensIndex[_type][lastTokenId] = tokenIndex;

        // pop the last off
        delete _allTypeTokensIndex[_type][_tokenId];
        _allTypeTokens[_type].pop();

        // update value
        _totalValue = _totalValue - _value;
    }

    function _addTokenToOwnerTypeTokens(address _to, uint256 _tokenId, uint256 _type, uint256 _value) private {
        uint256 length = _ownedTypeTokens[_to][_type].length;
        _ownedTypeTokens[_to][_type].push(_tokenId);
        _ownedTypeTokensIndex[_to][_type][_tokenId] = length;
        _ownedValue[_to] = _ownedValue[_to] + _value;
        if (length == 0) {  // first token of type for user
            _ownedTypes[_to] = _ownedTypes[_to] + 1;
        }
    }

    function _removeTokenFromOwnerTypeTokens(address _from, uint256 _tokenId, uint256 _type, uint256 _value) private {
        // To prevent a gap in the tokens array, store the last token in the
        // vacated index.
        uint256 lastTokenIndex = _ownedTypeTokens[_from][_type].length - 1;
        uint256 tokenIndex = _ownedTypeTokensIndex[_from][_type][_tokenId];

        uint256 lastTokenId = _ownedTypeTokens[_from][_type][lastTokenIndex];

        // move the last token into place and update its index
        _ownedTypeTokens[_from][_type][tokenIndex] = lastTokenId;
        _ownedTypeTokensIndex[_from][_type][lastTokenId] = tokenIndex;

        // pop the last off
        delete _ownedTypeTokensIndex[_from][_type][_tokenId];
        _ownedTypeTokens[_from][_type].pop();

        // update value
        _ownedValue[_from] = _ownedValue[_from] - _value;
        if (lastTokenIndex == 0) {  // last token of type for user
            _ownedTypes[_from] = _ownedTypes[_from] - 1;
        }
    }
}
